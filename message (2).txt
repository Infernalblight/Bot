import discord # type: ignore
from discord.ext import commands # type: ignore
import os
import datetime
import json
import asyncio
import random
import string

def get_token():
    with open("C:/Users/Liams/Desktop/Token.txt", "r") as file:
        return file.read().strip()

TOKEN = get_token()
ADMIN_ID = 1028600684746117170
ALLOWED_USER_ID = 1028600684746117170
DATA_FILE = "user_data.json"

intents = discord.Intents.default()
intents.message_content = True

bot = commands.Bot(command_prefix="?", intents=intents)

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as file:
            return json.load(file)
    return {}

def save_data(data):
    with open(DATA_FILE, "w") as file:
        json.dump(data, file, indent=4)

def get_user_data(user_id):
    data = load_data()
    if str(user_id) not in data:
        data[str(user_id)] = {
            "currency": 0,
            "backup_key": None,
            "redeemed_codes": [],
            "redeemed_robux": 0,
            "robux_username": None,
            "robux_link": None
        }
        save_data(data)
    return data

def save_user_data(user_id, user_data):
    data = load_data()
    data[str(user_id)] = user_data
    save_data(data)

async def resolve_user(ctx, user_identifier):
    if user_identifier.isdigit():
        return await bot.fetch_user(int(user_identifier))
    else:
        if ctx.message.mentions:
            return ctx.message.mentions[0]
        members = ctx.guild.members
        for member in members:
            if member.name == user_identifier or member.display_name == user_identifier:
                return member
    return None

@bot.command()
async def Robux(ctx, amount: int):
    user_id = ctx.author.id
    data = get_user_data(user_id)

    if amount <= 0:
        await ctx.send("Please enter a valid positive amount of Robux to exchange.")
        return

    if amount > data[str(user_id)]["currency"]:
        embed = discord.Embed(title="Insufficient Currency", 
                              description=f"You only have {data[str(user_id)]['currency']} currency!", 
                              color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    data[str(user_id)]["currency"] -= amount
    data[str(user_id)]["redeemed_robux"] += amount
    save_user_data(user_id, data[str(user_id)])

    await ctx.author.send("Before we proceed with the Robux exchange, please send your username and the game pass link.\nFormat: username gamepass_link")

    def check(msg):
        return msg.author == ctx.author and len(msg.content.split()) == 2

    try:
        msg = await bot.wait_for('message', check=check, timeout=60.0)
        username, link = msg.content.split()

        data[str(user_id)]["robux_username"] = username
        data[str(user_id)]["robux_link"] = link
        save_user_data(user_id, data[str(user_id)])
        
        admin_user = await bot.fetch_user(ADMIN_ID)
        await admin_user.send(
            f"User {ctx.author} has requested Robux exchange.\n"
            f"Amount: {amount}\n"
            f"Username: {username}\n"
            f"Gamepass Link: {link}"
        )

        embed = discord.Embed(title="Robux Exchange", 
                              description=f"You spent {amount} currency on Robux! You now have {data[str(user_id)]['currency']} left.", 
                              color=discord.Color.green())
        await ctx.send(embed=embed)

    except asyncio.TimeoutError:
        await ctx.author.send("You took too long to provide the username and link. Please try again.")

@bot.command()
async def CurrencyGive(ctx, user_identifier: str, amount: int):
    if ctx.author.id != ADMIN_ID:
        embed = discord.Embed(title="Permission Denied", 
                              description="You do not have permission to use this command.", 
                              color=discord.Color.red())
        await ctx.send(embed=embed)
        return
    
    target_user = await resolve_user(ctx, user_identifier)
    if not target_user:
        await ctx.send(embed=discord.Embed(title="User Not Found", 
                                             description="Could not find the user specified.", 
                                             color=discord.Color.red()))
        return
    
    data = get_user_data(target_user.id)
    data[str(target_user.id)]["currency"] += amount
    save_user_data(target_user.id, data[str(target_user.id)])
    
    embed = discord.Embed(title="Currency Given", 
                          description=f"Gave {amount} currency to {target_user.mention} (User ID: {target_user.id}). They now have {data[str(target_user.id)]['currency']} currency.", 
                          color=discord.Color.blue())
    await ctx.send(embed=embed)

@bot.command()
async def CurrencyPay(ctx, user_identifier: str, amount: int, *, message: str):
    user_id = ctx.author.id
    data = get_user_data(user_id)
    
    if amount <= 0:
        await ctx.send("Please enter a valid positive amount of currency to pay.")
        return
    
    if amount > data[str(user_id)]["currency"]:
        embed = discord.Embed(title="Insufficient Currency", 
                              description=f"You only have {data[str(user_id)]['currency']} currency!", 
                              color=discord.Color.red())
        await ctx.send(embed=embed)
        return
    
    data[str(user_id)]["currency"] -= amount
    save_user_data(user_id, data[str(user_id)])
    
    receiver_user = await resolve_user(ctx, user_identifier)
    if not receiver_user:
        await ctx.send(embed=discord.Embed(title="User Not Found", 
                                             description="Could not find the user specified.", 
                                             color=discord.Color.red()))
        return

    receiver_data = get_user_data(receiver_user.id)
    receiver_data[str(receiver_user.id)]["currency"] += amount
    save_user_data(receiver_user.id, receiver_data[str(receiver_user.id)])
    
    embed = discord.Embed(title="Currency Sent", 
                          description=f"You sent {amount} currency to {receiver_user.mention} (User ID: {receiver_user.id}).", 
                          color=discord.Color.green())
    await ctx.send(embed=embed)
    
    receiver_embed = discord.Embed(title="Currency Received", 
                                    description=f"You received {amount} currency from {ctx.author.mention}. Message: {message}", 
                                    color=discord.Color.blue())
    await receiver_user.send(embed=receiver_embed)

@bot.command()
async def CurrencySet(ctx, user_identifier: str, amount: int):
    if ctx.author.id != ADMIN_ID:
        embed = discord.Embed(title="Permission Denied", 
                              description="You do not have permission to use this command.", 
                              color=discord.Color.red())
        await ctx.send(embed=embed)
        return
    
    target_user = await resolve_user(ctx, user_identifier)
    if not target_user:
        await ctx.send(embed=discord.Embed(title="User Not Found", 
                                             description="Could not find the user specified.", 
                                             color=discord.Color.red()))
        return
    
    data = get_user_data(target_user.id)
    data[str(target_user.id)]["currency"] = amount
    save_user_data(target_user.id, data[str(target_user.id)])
    
    embed = discord.Embed(title="Currency Set", 
                          description=f"Set the currency of {target_user.mention} (User ID: {target_user.id}) to {amount}.", 
                          color=discord.Color.blue())
    await ctx.send(embed=embed)

@bot.command()
async def CurrencyDeposit(ctx, amount: int, username: str):
    user_id = ctx.author.id
    data = get_user_data(user_id)
    
    if amount <= 0:
        await ctx.send("Please enter a valid positive amount to deposit.")
        return
    
    embed = discord.Embed(
        title="Deposit Request",
        description=f"User {ctx.author.mention} wants to deposit {amount} currency.\n"
                    f"Roblox Username: {username}.",
        color=discord.Color.gold()
    )
    
    admin_user = await bot.fetch_user(ADMIN_ID)
    await admin_user.send(embed=embed)
    
    await ctx.author.send(
        "Your deposit request has been submitted! "
        "Please note that the gamepass deposit link usually takes up to 24 hours to be created. "
        "Worry not, as it's a rare occurrence. Thank you!"
    )

@bot.command()
async def Bank(ctx):
    user_id = ctx.author.id
    data = get_user_data(user_id)
    
    if not data[str(user_id)]["backup_key"]:
        data[str(user_id)]["backup_key"] = f"BKP-{user_id}-{datetime.datetime.now().strftime('%Y%m%d%H%M%S')}"
        save_user_data(user_id, data[str(user_id)])
    
    embed = discord.Embed(title="Bank", 
                          description=f"Your backup key: ||{data[str(user_id)]['backup_key']}||", 
                          color=discord.Color.gold())
    embed.add_field(name="Current Currency", value=f"{data[str(user_id)]['currency']}", inline=False)
    embed.add_field(name="Redeemed Robux", value=f"{data[str(user_id)]['redeemed_robux']}", inline=False)
    embed.add_field(name="Redeemed Codes", 
                    value=f"{', '.join(data[str(user_id)]['redeemed_codes']) if data[str(user_id)]['redeemed_codes'] else 'None'}", 
                    inline=False)
    await ctx.send(embed=embed)

@bot.command()
async def UseBackupKey(ctx, backup_key: str):
    data = load_data()
    target_user_id = None
    for user_id, user_data in data.items():
        if user_data.get("backup_key") == backup_key:
            target_user_id = user_id
            break
    
    if not target_user_id:
        await ctx.send(embed=discord.Embed(title="Invalid Key", 
                                             description="The backup key you provided is invalid.", 
                                             color=discord.Color.red()))
        return
    
    original_data = data[str(target_user_id)]
    data[str(ctx.author.id)] = original_data
    save_data(data)

    embed = discord.Embed(title="Backup Restored", 
                          description="Your backup data has been restored!", 
                          color=discord.Color.green())
    embed.add_field(name="Currency", value=f"{original_data['currency']}", inline=False)
    embed.add_field(name="Redeemed Robux", value=f"{original_data['redeemed_robux']}", inline=False)
    embed.add_field(name="Redeemed Codes", 
                    value=f"{', '.join(original_data['redeemed_codes']) if original_data['redeemed_codes'] else 'None'}", 
                    inline=False)
    await ctx.send(embed=embed)

@bot.command()
async def CodeRedeem(ctx, code: str):
    user_id = ctx.author.id
    data = get_user_data(user_id)
    
    local_codes = [
"A2147-8932-4758-2134-9857-3421-6589B",
        "A6582-1957-4632-8174-9821-3546-7890B",
        "A9832-7412-6584-3922-6578-9432-1567B",
        "A4219-6587-9423-1758-4632-8174-9821B",
        "A1759-8234-6578-9432-6584-3921-6578B",
        "A4632-8174-9821-3546-7890-1234-5678B",
        "A6584-3921-6578-9432-1567-8923-4567B",
        "A2148-6593-4758-2134-9857-3421-6589B",
        "A9821-3546-7890-1234-5678-9432-1567B",
        "A6578-9432-6584-3921-6578-8923-4567B",
        	"A6239-5835-6957-5202-7485-3057B",
	"A1465-7985-3236-6183-5516-6598B",
	"A4730-3624-2610-5208-5901-6791B",
	"A9176-4721-9483-1113-6334-9476B",
	"A5747-2148-4679-5180-3165-5396B",
	"A2927-9701-2737-9421-4163-1836B",
	"A9221-9273-6951-6444-2488-5967B",
	"A7083-1562-6089-2624-5683-5219B",
	"A3449-8881-6681-8332-4090-3649B",
	"A2994-9677-7714-5283-8113-2525B",
	"A3815-8243-7419-5373-6535-9374B",
	"A3630-3957-8499-1170-5464-3421B",
	"A2194-4524-6012-3385-4002-3858B",
	"A2323-1195-6347-7435-6991-5573B",
	"A1666-2453-7861-7128-6212-1853B",
	"A4432-1489-3202-5154-5774-8274B",
	"A7195-8452-5533-3991-7086-1678B",
	"A6705-7009-1282-4095-6839-5356B",
	"A6931-1538-4329-9413-5778-6194B",
	"A9317-2415-6148-1622-4615-1630B",
	"A8238-6307-9086-9271-7357-3333B",
	"A2230-5162-3172-2840-7215-5810B",
	"A7831-7792-3904-8774-2897-3868B",
	"A5537-1066-3999-5918-8626-4156B",
	"A4692-8185-6275-8056-3005-7136B",
	"A3172-4162-4891-3820-6117-1894B",
	"A6318-2611-6687-4529-8848-4313B",
	"A3808-1336-1435-1544-5525-1263B",
	"A7364-1804-7697-6317-5111-2763B",
	"A1704-3334-8868-5504-9859-9182B",
	"A3975-1926-5153-5256-1810-5503B",
	"A4161-5471-9303-7041-6431-2309B",
	"A4659-8574-8669-6317-2884-3657B",
	"A8859-9175-5040-4639-7432-9132B",
	"A8497-3115-5970-3766-3818-6338B",
	"A3561-5893-1552-6534-6517-8667B",
	"A7113-9228-4457-5901-4049-1924B",
	"A6740-1535-9170-7093-7203-3829B",
	"A1577-4114-8410-6820-6247-7937B",
	"A8527-8342-2438-3050-3863-7673B",
	"A1126-8739-1165-3624-9775-1238B",
	"A5346-5018-8655-1140-9293-4478B",
	"A1563-7977-7903-2182-5040-3848B",
	"A3955-8571-3892-8913-3742-6241B",
	"A8093-2469-2986-6054-2188-6927B",
	"A3667-5617-7744-7355-4078-6689B",
	"A1379-2162-8713-3384-1382-4243B",
	"A6377-8047-5035-6749-5873-1237B",
	"A9496-3995-8125-8531-5391-2631B",
	"A3172-9101-9977-3816-5513-3462B",
	"A2793-8953-1498-9478-3583-8981-3897-5433B",
	"A7250-4248-8631-4818-3584-5188-1985-7520B",
	"A7522-2777-7969-2672-4943-7180-7398-2626B",
	"A6881-4798-8158-3998-5201-5071-7230-7301B",
	"A5923-1800-9537-3488-2728-2078-6752-5856B",
	"A8532-6883-3962-8429-7515-5464-5972-6590B",
	"A9652-4056-2974-2933-3204-3621-7223-2313B",
	"A4704-1222-8066-9159-3746-9617-3597-5563B",
	"A5962-5268-5108-8806-7023-4925-2151-3729B",
	"A4211-2810-1201-1455-8663-6535-9393-3539B",
	"A9127-8793-6147-7780-3551-1692-6167-7281B",
	"A9053-3149-8678-1585-4440-1536-7780-3820B",
	"A5910-9168-2102-3707-6684-9452-2951-6429B",
	"A8981-2205-3913-8060-1981-4718-3865-7824B",
	"A2596-1478-9987-1945-6837-6721-5113-3904B",
	"A8958-4953-1657-5235-5236-7855-6695-8898B",
	"A3528-8012-4324-3050-2504-7805-9634-8052B",
	"A2614-1397-2565-9335-6582-2109-8283-5948B",
	"A6907-2083-4188-8449-7868-4238-4504-9421B",
	"A1485-8564-3353-8736-3521-2057-5103-1176B",
	"A4865-1682-5841-9438-9939-3180-4125-8260B",
	"A4878-8853-5517-6419-8797-8516-2663-5519B",
	"A2966-1097-2441-5872-1630-1218-9423-3024B",
	"A6166-5242-3504-4833-7525-3981-7997-9409B",
	"A1049-2825-6523-2192-5752-7101-9449-8861B",
	"A6867-5754-5851-9248-3031-3096-1915-1593B",
	"A7474-2002-5306-7564-8808-4919-6427-7188B",
	"A8824-3267-3132-3131-9044-8087-6060-9584B",
	"A9060-9706-2116-2011-4384-7508-2941-9557B",
	"A3632-7275-5357-2485-2635-3799-8410-9018B",
	"A3054-4909-3544-3723-3597-5577-1259-9275B",
	"A1440-2142-5334-4386-4628-3273-9524-1695B",
	"A2449-9296-8208-3054-5455-7801-8249-5576B",
	"A1586-3281-8080-4029-8009-7835-5780-9048B",
	"A4407-9061-7580-5696-3399-9752-1448-9632B",
	"A1306-2223-6555-4365-8550-6534-3930-9276B",
	"A4244-5650-6322-3692-8672-7610-4286-7230B",
	"A5492-4227-5457-2952-3683-5939-9525-5678B",
	"A1038-8027-3206-1339-2018-1883-4451-9733B",
	"A7210-5132-6445-5548-3292-8273-4187-9722B",
	"A8325-7294-8874-8922-1127-4838-8318-3645B",
	"A7598-4530-6332-5286-3997-6788-8367-6247B",
	"A3539-5817-5396-7557-1023-5235-8733-3380B",
	"A6800-4899-2985-4963-9807-6585-1570-1085B",
	"A9648-8753-6556-6688-4402-7718-2320-1808B",
	"A5897-1052-2009-2651-7503-8449-4514-7425B",
	"A6660-9468-1869-6395-1337-4518-5953-5920B",
	"A9621-1264-5608-7241-8761-2056-3886-2401B",
	"A7031-5601-2869-3016-9297-7601-1206-4363B",
	"A8733-5572-2953-9759-4823-7261-7491-8275B",
	"A7037-4699-3375-6245-3880-8327-3291-4053B",
	"A9821-6658-1375-7244-1191-8475-5134-5720B",
	"A9751-1201-8775-2027-3727-8832-4380-1728B",
	"A4335-6642-6721-7454-4655-9490-7269-5318B",
	"A3358-4539-1211-5026-6609-1730-5472-6456B",
	"A9257-6199-8253-6198-6059-8784-8414-9837B",
	"A9320-9835-5136-5250-2666-8464-5107-4419B",
	"A5110-9399-4720-1931-3417-3569-7092-8308B",
	"A1418-7797-8462-9361-2572-2863-8355-7053B",
	"A9178-3413-6844-8941-9892-7658-7388-5696B",
	"A4438-4182-5893-8133-1959-3900-9268-3006B",
	"A7294-5740-7668-3548-9988-7658-5311-9102B",
	"A8353-5648-9866-5597-5876-1930-4120-9688B",
	"A1169-7279-1842-8918-9400-5634-2235-1264B",
	"A6690-7952-2258-9155-2329-3925-9892-4289B",
	"A3332-8687-2100-7056-3225-9418-4699-9676B",
	"A5340-2459-1312-2029-3135-3835-7791-3081B",
	"A8087-7239-8664-4675-1291-1931-1887-5461B",
	"A8027-4827-1743-7389-9869-2631-9224-4378B",
	"A9232-5223-5585-9751-5833-6873-7208-5604B",
	"A7131-6079-3494-6978-2873-6720-8570-7087B",
	"A1505-8507-8531-4171-6039-3183-1621-5377B",
	"A6527-6752-3522-8100-3953-1919-5148-3360B",
	"A8719-1829-5464-8371-8306-5481-3907-9268B",
	"A4211-2493-5981-4920-4667-9139-6039-3526B",
	"A2359-7609-2900-3288-9867-5981-7997-3151B",
	"A2366-4065-4939-8817-8037-2564-3472-6345B",
	"A1942-2932-5494-8418-4345-6404-9951-4534B",
	"A3044-5437-1619-6688-7705-1574-9144-2258B",
	"A4365-9236-5269-8802-6000-7970-1404-5488B",
	"A1642-6235-4601-6357-4591-5687-8180-1266B",
	"A6817-1085-7578-6485-5979-2726-2408-4064B",
	"A2289-2092-7579-9991-2004-4291-2278-2565B",
	"A1470-6417-2057-7714-2071-7091-3126-1385B",
	"A2882-4653-1356-8147-3413-2602-4796-7080B",
	"A7806-9485-7711-3001-7767-1152-5301-3577B",
	"A9446-9060-6700-8402-5891-7944-1068-1733B",
	"A5379-6767-7237-5227-9043-9511-7604-8432B",
	"A8740-1961-4300-9262-9083-7467-8669-2230B",
	"A6650-4704-5092-8819-8219-4768-9804-8302B",
	"A7925-3477-1690-7609-3058-1378-2430-6433B",
	"A7170-1410-3507-9357-8610-5024-7785-8342B",
	"A7585-5586-3532-1515-2172-8440-9738-1193B",
	"A7318-2046-2680-9022-8994-9799-7594-3870B",
	"A2001-6699-9518-4117-6422-4571-2956-7967B",
	"A5211-8926-9205-4452-4000-7883-2122-2899B",
	"A8884-7458-9868-4885-2741-7072-2880-4005B",
	"A3474-3922-2098-2009-8541-2078-4103-6115B",
	"A5941-6164-1478-7396-8948-4305-4707-1092B",
	"A3618-1080-9017-4751-9230-5659-5022-1806B",
    "A1202-6643-6900-4981-8409-7344-5984-2819B",
"A4033-1470-4491-3140-5841-6364-4394-1059B",
"A4247-7093-5058-8842-2336-6990-4112-9680B",
"A9464-4416-7810-5402-1641-8803-7518-9791B",
"A9539-7223-4816-3327-7331-6614-5693-2971B",
"A9689-8767-7532-5226-1420-8036-3023-1366B",
"A6770-6962-3915-4323-6587-3922-8136-3941B",
"A2045-5139-8929-5085-4357-5227-1007-9030B",
"A8649-5885-6263-2189-3277-1802-8873-6955B",
"A6170-6815-6241-4896-4292-3603-6470-4644B",
"A2318-8082-8276-5395-6119-6170-8412-3128B",
"A7552-2152-7886-7115-9913-8518-4282-9202B",
"A9079-9066-4203-6917-5172-3720-7895-1719B",
"A6338-1929-1425-5721-2650-4000-5847-9816B",
"A1459-1706-3467-2831-3119-7534-8378-7771B",
"A7484-2017-4101-5646-7054-4249-1963-2089B",
"A6262-7166-3992-8324-6936-2306-3686-2919B",
"A8723-7972-8868-7531-4284-2328-4812-9454B",
"A3786-3371-6385-7238-2867-5623-8617-4953B",
"A2033-6766-6595-9690-7663-9305-5993-9637B",
"A7114-6648-6971-3676-2862-8358-1981-7880B",
"A2340-1648-1992-2630-8251-9732-6647-1674B",
"A2286-2432-4679-8101-6387-6659-7106-4511B",
"A3666-5210-7080-7088-2428-8265-6920-9941B",
"A7690-1641-7826-1207-2139-5861-9568-6238B",
"A7944-3689-9280-8901-3939-7384-9682-8672B",
"A8173-5345-9721-5755-6021-5758-7702-1326B",
"A1357-8792-2932-6572-8854-8545-4424-8096B",
"A4156-6231-2575-6691-7498-3905-8115-8673B",
"A3126-6382-3224-6669-6391-7021-7287-2826B",
"A4032-3021-9493-9033-3260-9943-8637-4103B",
"A1272-6683-3527-1790-8934-2062-9148-5005B",
"A2109-1088-2249-2762-6622-8873-4410-9876B",
"A3313-7047-2285-8439-4820-6250-5810-5942B",
"A8658-7490-7847-2888-5901-6954-5913-8357B",
"A3622-4294-6981-8541-9572-4705-3248-1639B",
"A4814-9654-7608-3903-8575-4730-1149-1085B",
"A1246-9968-4371-2429-7574-1223-8899-6768B",
"A9726-2013-5749-8366-8544-7339-5360-9553B",
"A3386-8093-3457-4378-7966-5855-2528-1763B",
"A4707-6283-1088-5497-7398-1304-1693-1639B",
"A7040-3892-8839-4774-8124-3564-5638-1885B",
"A1984-8875-8558-4411-1765-3268-1037-9593B",
"A2456-4011-5278-9741-6371-6011-2018-2358B",
"A5667-5616-4310-9730-6164-2321-4099-3812B",
"A7652-1452-5392-3667-8377-1491-2441-3358B",
"A9641-1541-6281-7187-6800-2291-3901-4967B",
"A6082-3821-9469-2961-4084-1380-9787-9532B",
"A9126-7220-9808-7909-1121-8719-5313-1356B",
"A8931-6581-6951-3901-6758-4318-7918-8392B",
"A8774-7386-9176-8823-1395-1666-1723-3243B",
"A9807-6000-5910-6964-6036-3415-5157-6440B",
"A9606-3848-3241-2715-3586-3002-4074-8256B",
"A5414-9868-4060-2068-4430-3144-2490-1101B",
"A1036-5512-3522-5595-7655-9021-2344-8889B",
"A3780-7321-7089-8186-4071-4546-7778-9735B",
"A9737-6737-2442-3988-9278-6663-3508-5085B",
"A5256-2573-2117-2561-7566-4714-8638-7540B",
"A5937-7327-8862-3660-8897-8478-4769-3954B",
"A2032-1113-9861-6637-5081-8865-2122-9018B",
"A4171-2829-2541-5861-5364-3377-1328-3902B",
"A3456-3728-3647-5720-2316-3601-8559-2597B",
"A7913-8792-5709-6730-6616-2445-9226-7783B",
"A4706-9315-9729-8295-6379-4161-4959-3661B",
"A4564-4594-4678-9498-4688-8214-6968-7557B",
"A6933-2874-6069-4337-3760-7923-9179-2580B",
"A3590-9911-6626-1229-5354-5829-8826-4081B",
"A5383-4632-5353-6525-4812-7541-6607-2172B",
"A4356-9766-4222-8568-5972-1824-2955-9427B",
"A7523-7465-4956-6966-9022-4086-6123-9626B",
"A7416-4376-4082-2429-5928-2342-3379-7662B",
"A3022-3748-8690-4290-9122-3195-4643-5683B",
"A4263-3173-7929-1921-1758-2744-7788-5084B",
"A2922-1422-1843-2085-7519-3376-2476-4142B",
"A3859-2156-5398-5840-2983-2252-9887-8036B",
"A7397-9916-8160-2921-3846-6676-9292-5517B",
"A5611-2067-9609-8902-7951-7339-8030-1174B",
"A4899-2529-4877-1703-9025-6912-5751-7293B",
"A3249-5495-1499-3366-6829-4097-9618-8477B",
"A6631-2868-4457-6383-9881-4276-4944-7655B",
"A4224-9520-2470-6095-1002-4945-4752-6654B",
"A5336-2189-8957-8245-3618-8738-5094-1244B",
"A8534-9583-1911-8001-1782-7692-5366-4429B",
"A5527-1375-8081-7335-7853-8664-2050-5425B",
"A3840-5644-8722-3457-3197-9196-4244-8004B",
"A5275-6581-3959-3682-8519-8209-9231-2046B",
"A7990-3748-2512-7255-6243-3580-6378-6646B",
"A8819-2848-6758-2988-8206-8451-6813-4773B",
"A8166-8229-7490-3395-6011-2980-3755-7666B",
"A9839-1030-4937-3635-5706-1949-8657-5025B",
"A4339-8294-5109-6479-5628-1707-6205-2197B",
"A8133-4724-5558-7138-3750-7897-8067-4495B",
"A3981-1459-8564-9681-5584-7402-4865-9880B",
"A7746-2861-8054-6233-5939-4910-3760-2715B",
"A9808-1046-3381-4506-2890-5043-8036-9399B",
"A4695-4891-6797-9341-1499-2963-6052-8191B",
"A7749-9591-5789-2665-7826-3940-6048-7379B",
"A2293-3119-4991-7528-8605-5860-7757-4068B",
"A2624-9407-4774-3094-8377-3748-3541-8109B",
"A6337-5901-2486-6578-2431-3606-7100-7492B",
"A2865-2328-8235-3781-3234-7957-9794-5419B",
"A2005-4279-4981-5972-7400-2184-9488-2982B",
"A2956-2628-1543-6580-1131-2122-9230-1962B",
"A2453-6578-2476-7959-5085-4012-7948-3803B",
"A8026-7280-1045-3983-1628-3426-5343-8399B",
"A3838-2362-4094-6509-9669-7334-6695-6145B",
"A2131-8154-4352-8201-4874-4549-8790-7992B",
"A3479-1493-9533-3308-3661-8976-9930-9238B",
"A2955-3995-4503-7293-9560-1386-2485-7460B",
"A3109-7695-4358-8243-1100-2755-5262-9147B",
"A2257-3713-2787-5777-4986-1815-7076-2403B",
"A5516-5296-8647-4102-6869-5829-8255-8360B",
"A8346-1899-9442-2401-3546-7451-6718-1101B",
"A2803-9693-9458-7730-4076-1527-1773-6962B",
"A4905-4925-5441-6391-1676-5095-9083-8439B",
"A1051-2227-8463-4992-4552-5583-7301-8949B",
"A5844-6049-6550-5412-4066-5696-4348-6306B",
"A1598-8352-7146-2606-6537-9696-5711-1416B",
"A6563-7845-7785-7393-3974-1953-2760-2545B",
"A2810-9625-3746-6458-2504-1339-9914-9129B",
"A9875-7652-9584-4835-3907-8315-4717-6238B",
"A7516-7936-9481-3742-8460-4782-6601-7327B",
"A3285-9570-4874-6227-5534-9780-1710-4357B",
"A3961-8863-3027-2745-4422-8883-1439-6769B",
"A9254-9997-8720-1690-2101-9784-7094-1903B",
"A1336-4449-8702-1576-8346-2793-5095-3277B",
"A1014-4953-1291-1763-5791-2670-2720-8301B",
"A9929-8446-3830-7917-2031-8529-5917-8867B",
"A7069-6285-4843-9027-7179-1680-8783-4540B",
"A2347-2764-2370-7202-7930-1950-5879-2255B",
"A9225-1169-2701-8039-1470-3880-3314-6204B",
"A9154-7852-3156-4101-6721-7907-6749-9458B",
"A9640-4831-7970-9630-8782-2006-1708-8634B",
"A7691-4088-1856-5451-6916-4024-3798-7103B",
"A7853-8809-2145-5439-5645-8195-4803-8809B",
"A8838-1407-5062-6056-3509-3728-6583-5180B",
"A3634-8653-7791-1844-7387-4644-7673-3184B",
"A3348-3260-4360-8286-8362-3069-5136-5163B",
"A1707-4505-8679-4093-3692-5328-3539-4033B",
"A3696-7349-9118-4305-2025-2966-8191-3291B",
"A1494-5685-5804-2564-6415-6945-5020-9010B",
"A5068-9983-2541-2278-3339-8552-2685-3328B",
"A3715-5436-8848-9617-3337-4486-9531-6783B",
"A5728-1160-4352-9977-6062-4825-4056-9979B",
"A1725-9149-6519-8170-9562-1432-9960-8892B",
"A5963-3949-8040-8073-9493-2932-7627-7957B",
"A8789-3121-6996-9548-5119-7024-9342-5116B",
"A4164-4918-5750-8840-7148-8546-9448-2395B",
"A1622-8719-3988-8179-3731-6106-4600-6409B",
"A2635-9221-7834-5984-2186-1731-8748-2940B",
"A8685-3251-8393-1715-6147-8428-8180-1056B",
"A8098-9401-5386-9960-7719-2351-9510-2551B",
"A7349-9729-6917-3621-6071-3966-9371-5514B",
"A8223-1539-8773-2138-1852-9333-5137-6096B",
"A7486-8543-1385-9464-3046-6021-5423-9568B",
"A4907-2086-4903-9951-7138-7916-9749-6094B",
"A2458-4339-1769-6631-7625-5435-7010-2173B",
"A4523-9454-3348-3319-7391-2021-9109-8645B",
"A3908-9200-4083-8257-1164-4574-9544-6346B",
"A2073-4314-3931-8823-9598-8985-8026-2830B",
"A5620-4110-4184-4642-1146-8378-1241-5792B",
"A5316-4769-6986-9274-9992-9461-9195-5292B",
"A3256-2496-4022-1801-3983-3394-8733-6491B",
"A7062-5156-1484-9320-8033-5971-1630-3143B",
"A8880-7531-6044-4387-9286-2408-5449-3589B",
"A3252-9911-1770-3636-5932-9765-7170-2231B",
"A1428-3492-6686-3708-2599-3177-3243-4037B",
"A6773-3242-1041-2090-3592-3981-3311-4824B",
"A9954-4447-7869-5362-5578-3492-4545-3636B",
"A7421-2799-8461-2125-8870-1520-9355-5882B",
"A6954-3921-8313-9260-3843-4031-7087-1130B",
"A9230-6154-2953-8283-3153-6658-4424-3149B",
"A8201-9359-8885-2980-7196-4220-2751-9044B",
"A9185-5189-4005-9458-3559-7297-3517-2014B",
"A7802-2538-9386-1850-9627-3880-8382-5086B",
"A7228-8595-6672-9847-5263-7629-4804-7370B",
"A6759-4779-1590-7566-3474-2215-3803-9189B",
"A5440-7141-1994-6502-1922-2887-4669-3591B",
"A5883-4594-2405-1488-6759-3988-2620-4750B",
"A4216-2646-1506-7071-3936-1724-5338-8832B",
"A8763-4830-3411-2630-6962-1218-6518-9111B",
"A2369-8742-8191-3353-3336-1582-5034-1611B",
"A5320-4041-7167-5449-9649-6751-9187-1996B",
"A6895-1663-2325-6886-9937-2526-1979-2658B",
"A5027-9502-9421-2413-5521-3860-5513-5456B",
"A7698-9698-1144-5677-6890-2278-7037-2502B",
"A8655-4322-9533-7879-6337-9935-8728-8215B",
"A7422-9679-1205-6449-2051-9419-6437-8787B",
"A7032-1766-2365-1274-7095-9701-3435-6735B",
"A7802-1871-1940-2617-3564-6762-2922-1404B",
"A9828-5987-4611-4010-9546-3148-4040-1677B",
"A6122-1103-5551-1708-3086-9152-4663-9269B",
"A9022-1833-9886-5494-3715-3428-4383-5340B",
"A4253-1969-4164-4311-1316-5981-3203-7820B",
"A6227-8448-5893-2243-6922-4573-1239-4850B",
"A4896-8004-4599-5120-2452-1844-4131-4665B",
"A8085-1221-9192-5514-4049-7398-9252-7682B",
"A1043-8171-8724-1751-9086-5406-8365-9782B",
"A9193-8526-3404-5893-6861-4817-3519-8637B",
"A4268-9343-3019-2946-5034-1517-8374-2314B",
"A6275-9137-1852-3643-8026-2899-1050-7070B",
"A6820-6214-8404-6461-3121-1224-3130-8022B",
"A6295-6267-7426-9341-9068-4701-8766-5822B",
"A4268-4806-8720-3756-2860-2116-8917-5389B",
"A5508-8314-4592-2094-1305-8141-5773-9692B",
"A1008-2578-2393-8347-6611-7186-2049-6983B",
"A7648-9282-5155-7936-1153-1291-7319-8741B",
"A5952-5998-2178-9411-9593-1022-5749-4204B",
"A8826-2464-8773-9026-6167-3110-1759-2277B",
"A6539-8659-9278-5313-5586-8098-2002-1905B",
"A6138-8556-1121-5997-9316-6257-3179-8936B",
"A1091-4080-8631-1831-9671-4462-8267-7143B",
"A3317-8892-1857-8083-6441-2358-5635-5240B",
"A4957-2887-5539-7829-5979-1700-1698-9078B",
"A6470-5848-5907-4346-4101-1905-8977-3546B",
"A3056-8901-8994-8827-7323-1083-8796-7339B",
"A1776-6189-4572-9999-9181-5417-6039-8716B",
"A4369-4215-4777-3318-2480-5892-3816-2297B",
"A8995-4316-3811-2813-1678-8312-4771-6300B",
"A8399-8997-6192-6064-2819-7112-7441-3934B",
"A7483-9804-2997-5550-8435-8467-1017-7378B",
"A3857-8995-1832-5000-7989-7293-9532-9656B",
"A9392-5068-1778-4141-1419-1182-6151-5799B",
"A9624-6595-5534-3308-1962-6290-7287-3132B",
"A4363-2503-1365-3393-2938-9795-3305-1671B",
"A7606-1138-6148-6678-4999-5158-1364-8254B",
"A9188-6971-5023-9562-3559-9250-1102-1790B",
"A8477-2814-8392-2175-8817-9445-7109-9042B",
"A1133-7833-7165-7589-8229-1570-9119-2564B",
"A2071-8017-1792-5803-8765-6399-6441-3698B",
"A6944-6838-4659-9799-6930-4222-3087-6527B",
"A6081-5667-3145-1636-6360-2439-2842-2267B",
"A7522-9751-5072-4282-8550-2019-8956-2798B",
"A1157-5658-5443-2590-3855-1015-7599-4047B",
"A8108-7239-6252-6174-4884-7593-8161-2135B",
"A8065-9264-8727-1445-1264-3847-5292-8546B",
"A8142-6649-4071-5661-2060-7376-3361-4699B",
"A5510-7030-3199-2383-8856-8589-6100-8004B",
"A7867-6543-9832-8863-7231-1517-9355-4950B",
"A9120-1637-8143-2754-2581-2583-4756-9708B",
"A4581-5409-5752-3021-9002-1099-9247-8016B",
"A8503-3208-3698-5969-1725-3836-8543-5701B",
"A9656-9843-3972-5281-4903-9363-6819-5924B",
"A6694-5466-7080-6405-4478-3329-8276-9668B",
"A8102-7382-8719-6152-1003-1631-5561-9129B",
"A6399-2884-1712-4292-6453-2698-4126-2123B",
"A4919-3481-8172-9538-2735-3692-6037-4567B",
"A3373-4228-7435-6073-1642-1707-1913-3374B",
"A6922-6301-2018-4622-1516-1089-9832-8416B",
"A1633-2210-9114-8600-8492-6749-7523-4661B",
"A4826-8089-8969-7221-2173-4047-9382-1683B",
"A3984-7125-8136-1686-4910-5432-6253-4978B",
"A2504-9774-6709-8173-2318-6712-8610-5921B",
"A2188-9547-4893-5721-4578-5537-8352-3132B",
"A2300-3081-1234-7641-5457-7043-6192-5616B",
"A3764-9024-6129-8634-8965-5891-7536-9362B",
"A8415-6677-1342-2332-6285-5575-4594-2432B",
"A7203-3898-1879-2842-4633-5336-1646-6179B",
"A7868-8076-1645-3336-3466-8074-4226-4852B",
"A8045-2795-6546-8960-3239-7480-9383-5229B",
"A4410-8157-4632-1613-4211-7607-8285-4844B",
"A2872-8314-2858-5317-8163-6673-1734-4199B",
"A9235-9579-1384-7131-2055-7597-9587-4164B",
"A3338-8416-1782-3480-4147-8235-8592-5684B",
"A8652-2591-5302-6259-4083-9303-4591-4748B",
"A7427-4320-5141-6788-9778-7601-3993-2024B",
"A4275-7653-8655-6135-8262-2093-3345-4091B",
"A6401-9273-9229-1868-1831-7719-4306-4012B",
"A7792-8332-2224-2376-2249-2566-9997-1977B",
"A8992-5206-2880-6689-2644-1701-6312-5999B",
"A7363-4144-2727-5183-3175-7991-2188-8974B",
"A5996-1999-9196-7388-1999-7549-1183-7372B",
"A1282-1112-7144-6383-2923-1925-2550-6058B",
"A7335-8198-8098-4345-3822-4320-5831-9542B",
"A1372-7672-2743-8632-3013-3515-1448-8702B",
"A5003-1213-5253-6078-3683-3230-3891-2661B",
"A6198-9612-7400-8376-7772-4074-8043-1552B",
"A9220-9801-8093-9759-2812-4513-4849-9455B",
"A3802-9682-5123-8517-1686-9449-4074-1820B",
"A6144-7116-3028-5150-7276-1211-7315-1216B",
"A1628-6596-8418-3923-8132-6187-8385-4511B",
"A4460-2681-9601-8592-2305-8783-6610-3822B",
"A5596-3181-7355-2233-4616-6972-7417-3130B",
"A5181-7658-8007-6696-9180-7469-6961-2373B",
"A8053-8493-8212-8562-3357-4811-6667-1238B",
"A4346-8273-3832-3782-5191-9960-5204-7240B",
"A2261-7950-5363-7342-8659-2031-2853-3514B",
"A5099-5057-4500-1382-3751-1904-5024-5624B",
"A6265-7400-6646-5013-6908-7731-2122-1363B",
"A2583-9108-8506-3311-3623-1508-5279-8964B",
"A6157-1909-7019-3002-7644-2908-6227-9864B",
"A7072-4326-2291-8655-5627-2126-6289-7692B",
"A8277-4149-7895-3036-5552-6618-9700-8090B",
"A5208-4950-1252-7106-7159-3145-8288-5002B",
"A3788-9917-6798-7281-7991-8692-3048-9319B",
"A5559-3159-7451-1780-5393-2602-2304-3531B",
"A4679-7915-2742-2569-7395-1261-6637-9860B",
"A2240-6908-3227-5015-1308-1921-4198-5639B",
"A2563-4326-9575-6734-5110-9293-9053-4805B",
"A6548-2981-3480-6740-1768-5285-9670-2510B",
"A7330-6170-9131-9321-3751-4726-2381-5861B",
"A5213-9947-8519-8543-8490-4347-5799-7713B",
"A3198-8032-7274-1729-3673-6008-6037-2876B",
"A2032-9053-1099-4608-3967-2810-9912-2870B",
"A5469-3834-5602-3566-6300-9673-1424-3759B",
"A1453-4324-4139-4304-5054-8177-8286-9573B",
"A5540-7574-5382-7896-2344-7377-5927-6413B",
"A7822-8111-5410-2111-3672-4018-5403-1692B",
"A1394-3250-8579-6717-6300-1421-7711-3965B",
"A3800-2112-1589-4365-1374-2645-4952-6244B",
"A4540-2905-3573-6051-1815-7389-2778-7043B",
"A9673-6815-3491-3698-8078-8300-1586-8253B",
"A5275-2645-9063-8945-3674-5931-5990-4097B",
"A7040-4446-2005-3923-7163-9876-1500-3024B",
"A9460-6072-4830-8561-5497-2472-5268-1557B",
"A1775-3324-9893-9561-8043-5732-5742-6636B",
"A8358-8118-4375-8577-4250-4277-3239-1806B",
"A4450-5079-4617-1477-6111-8486-5124-5273B",
"A8016-9448-6784-1353-5178-7774-3653-1842B",
"A5878-2231-4946-5884-2565-1269-2348-6090B",
"A1834-4086-2824-8695-2229-9049-9808-5163B",
"A7741-8948-6576-4543-1280-3796-5750-5922B",
"A2715-6477-4163-8669-6249-7263-4277-2391B",
"A3121-5651-7520-7067-8460-6110-9372-1910B",
"A7878-7152-8706-7124-2995-5914-7531-1177B",
"A3863-5253-2890-8205-5793-8739-6587-1895B",
"A4498-2576-6274-6259-8124-3938-6367-1071B",
"A6257-9435-2327-8080-2721-4477-9972-5737B",
"A5719-3028-3718-3103-7360-2330-8054-9616B",
"A9175-8815-8113-2624-9618-8351-2096-1589B",
"A5629-8630-2997-1874-6086-3980-1060-1180B",
"A6761-9285-4630-3117-3055-1741-5449-1254B",
"A2139-3926-5051-4362-7143-4817-4104-7843B",
"A8487-6307-9104-3764-1001-1867-7027-6584B",
"A6723-6620-9934-8605-3884-5000-6257-4550B",
"A9096-3054-8990-3843-9767-8724-8813-4230B",
"A7901-4488-8232-5086-7074-1634-9986-6532B",
"A9950-1897-6782-2713-6781-3792-5546-4128B",
"A6645-9407-2992-8242-8552-2863-4861-3653B",
"A8000-6613-7580-8987-5122-3135-8601-7455B",
"A5867-9962-1906-4169-2130-9427-5082-8875B",
"A6762-2778-6463-9677-5710-7846-8677-8744B",
"A4207-3441-4590-8352-6804-9268-6511-5308B",
"A1577-8884-4205-5440-8694-6535-2306-6796B",
"A5770-6686-2743-5201-2456-9159-9295-4762B",
"A8279-8720-4093-2833-8599-1881-1324-3669B",
"A2624-6083-3088-3561-5962-2511-5700-1284B",
"A7645-7700-6224-6164-1489-5613-5787-8673B",
"A4006-7024-9388-7384-9808-1373-2098-7227B",
"A6933-4194-8327-7660-5403-4158-3981-2656B",
"A4231-8318-3998-1311-7815-7623-8815-1526B",
"A1252-4600-3991-8533-9371-6525-1833-5135B",
"A1085-9563-2369-8315-6566-5263-9095-9159B",
"A1815-8566-5053-8905-8772-8270-4946-9659B",
"A2080-4651-6261-7372-9385-8607-3059-5180B",
"A8419-4029-5387-1242-4032-9668-5507-8463B",
"A1091-2887-5749-4598-7218-4900-3656-2464B",
"A8984-6225-3851-7340-8012-8762-9817-2963B",
"A7620-4014-2481-2193-4424-7877-5225-1058B",
"A2372-1930-6421-7980-9115-6382-9214-3509B",
"A1344-7578-7666-2321-9781-5815-4294-5216B",
"A2888-4832-9101-9546-7625-2916-9750-1085B",
"A3280-4677-1949-7823-5840-4351-5491-6479B",
"A9965-5515-1532-9958-8633-4279-4767-5298B",
"A5141-2015-4472-1130-9147-3313-5327-6059B",
"A1394-6066-3508-4680-9574-4010-8407-2898B",
"A6398-6016-8483-4081-7903-1481-7508-1204B",
"A4182-1616-2790-2116-1426-4857-1915-5852B",
"A6734-3796-4780-2197-2891-8928-3712-4683B",
"A8347-1784-4181-4714-3993-7784-5077-6812B",
"A1934-9027-9626-7758-3316-5567-1906-9422B",
"A8709-2938-4019-3343-6216-2199-8255-6430B",
"A8270-4896-3471-7717-8387-2565-4765-9551B",
"A6335-8557-8278-6202-3686-2007-3751-8754B",
"A8330-5957-8794-1522-8930-9449-3219-6667B",
"A3908-8571-8564-7920-6416-4766-8781-9218B",
"A3267-3278-3342-2195-3148-4094-5371-4612B",
"A7370-4562-8616-4398-9898-8562-4970-2125B",
"A5331-8907-4498-4968-1920-5312-8772-5450B",
"A8424-2355-4327-6120-8851-1362-4878-7549B",
"A5102-9642-2998-4367-1582-6961-8058-9994B",
"A2910-7268-9671-9980-2487-4851-6739-8228B",
"A4203-6842-6797-8476-4603-7270-6201-1107B",
"A5861-5699-1597-3790-3386-8030-6909-7044B",
"A1006-1853-9660-4926-4016-8741-8633-7868B",
"A9173-1273-2400-8803-4696-7715-2408-5512B",
"A3605-9027-3605-7733-4964-3917-7137-6484B",
"A5286-6206-3462-2042-5712-1782-9024-1235B",
"A5830-1387-2478-8054-2253-7127-1168-5151B",
"A4035-4734-2896-8398-4159-9831-7985-5040B",
"A9758-4130-8994-6844-9331-8292-9100-4765B",
"A7837-6638-9864-1898-7192-6517-9734-2756B",
"A4158-9039-6411-1249-1433-3137-4304-4391B",
"A8864-3694-4516-6038-7334-1684-5059-5696B",
"A5041-5032-1418-1070-1793-3508-9598-4629B",
"A2611-3690-2169-8283-4199-2972-5577-5937B",
"A4521-3510-6259-2085-5797-5094-4932-1122B",
"A7727-3898-6908-8203-8552-9296-7958-4123B",
"A2375-6172-8510-6962-6462-1601-5284-8086B",
"A4821-2579-2665-7264-1417-3072-4776-6920B",
"A1909-2648-3440-9654-4609-2976-6900-4703B",
"A1065-6967-6840-2948-2779-7515-4272-4707B",
"A7878-3138-7261-9074-3363-1430-3814-3018B",
"A4735-3929-9267-6475-5834-3745-4035-9387B",
"A7527-6684-5301-1891-1409-7476-9413-9810B",
"A4627-5901-2134-7490-5499-8638-6252-5637B",
"A8281-8965-2756-2178-2842-1340-7971-1747B",
"A5345-8757-3023-4806-9793-7726-9025-9643B",
"A3594-2294-4989-6758-2179-3279-1582-5726B",
"A8550-1750-4979-9178-2524-7574-5842-5359B",
"A4239-5935-7616-7627-8423-5261-6128-4357B",
"A5510-4462-7828-9887-5884-2928-2649-8395B",
"A5855-5412-3800-3433-9621-6485-6435-3852B",
"A7836-3764-3524-2965-9946-1222-9677-4479B",
"A4795-5167-2259-6736-1082-5593-4857-2644B",
"A3600-1827-1179-8887-5548-3363-8798-4375B",
"A6695-4961-4734-3624-8299-7638-5625-7817B",
"A2140-3894-3829-5316-9739-9330-7099-8952B",
"A4036-2280-4723-2486-5975-8780-2147-2837B",
"A3893-1699-5228-3710-8498-7436-6701-4257B",
"A3890-7092-6962-6796-8616-7233-3077-3394B",
"A4522-5116-8418-2931-5137-7916-5018-9613B",
"A9281-1440-2919-9220-8742-2840-5297-7497B",
"A4115-5912-7052-9428-2216-9890-7611-3437B",
"A3998-8835-5691-1294-6995-1456-9745-6124B",
"A4384-9489-8729-3004-2728-1184-3969-2231B",
"A1009-4841-1062-9972-6955-6236-9342-5649B",
"A1139-7089-9460-4123-8430-4796-8018-3588B",
"A3438-5319-5897-2007-4158-7767-9447-5310B",
"A4695-4826-9558-3269-7291-7747-9719-3747B",
"A1713-9495-1653-7306-5262-3044-4851-1320B",
"A4407-9060-3164-1241-3709-9597-7248-7497B",
"A9637-3036-8094-1208-7897-7850-6300-4048B",
"A1382-7115-6880-9236-5033-8793-3436-3244B",
"A3747-5653-6890-2183-6011-2856-5535-3797B",
"A5448-6715-4245-4044-3569-4847-5130-2032B",
"A2161-2881-1718-7986-7130-6268-1316-8522B",
"A1781-3198-6111-5420-7327-4032-8320-1107B",
"A7382-6760-3879-7394-5905-1796-9423-7578B",
"A7421-5620-7223-4196-2324-4630-6041-2344B",
"A4180-5372-4046-6612-7857-7620-2060-7770B",
"A8815-8220-9188-9816-9683-1808-1243-8492B",
"A8407-5708-1640-1627-9330-7262-9147-7338B",
"A7652-4318-2402-9788-8954-8840-7935-6302B",
"A6507-9830-2172-5861-9018-5304-8476-2458B",
"A9147-8152-3594-3108-6168-7977-2819-6542B",
"A8129-5558-6289-5912-2889-9074-9614-3608B",
"A7276-7663-5065-8139-1396-7583-4591-1360B",
"A1647-8306-4395-5331-7496-8947-5088-6413B",
"A5753-4859-9590-7518-4200-1939-7487-9375B",
"A4950-7888-7052-7003-3986-5203-3319-6534B",
"A7516-7443-7646-4065-7971-6227-9842-3941B",
"A6620-4103-7920-1791-2563-4901-4500-8950B",
"A5412-8855-9037-4128-3933-6796-4393-7312B",
"A1991-6643-5842-2825-1874-7227-5257-8989B",
"A7452-1782-8109-9144-3935-9770-7770-7475B",
"A3367-9398-3801-1578-9331-6794-5404-8386B",
"A1131-9817-8193-5719-8676-8316-7261-3040B",
"A9014-3837-5652-6599-1442-4620-9946-1471B",
"A2726-5035-7000-3992-4472-8042-9810-2700B",
"A1194-9824-6663-4168-5235-2561-7313-7110B",
"A7243-8350-2734-9209-5538-7600-8841-4576B",
"A2788-6688-1022-7313-3209-4806-3328-4340B",
"A2094-5112-4593-9084-6928-4296-1950-4679B",
"A2807-5879-2016-6622-2731-7359-1688-5659B",
"A5583-2996-6573-7735-5384-9284-9473-8369B",
"A9823-5115-3915-1273-9281-9398-6891-6471B",
"A7034-7462-1213-3783-7100-6288-3514-8801B",
"A9429-7927-6995-8211-7235-7118-4519-8262B",
"A3395-1062-7886-3540-4373-1199-6211-1804B",
"A7913-7865-5034-7629-1190-5473-6474-4177B",
"A5358-8347-7573-9901-2458-4929-7776-7659B",
"A9913-6394-6759-8777-3218-1195-1059-6271B",
"A7458-1970-4649-6156-3370-4155-2292-5364B",
"A9864-2046-6243-6075-2491-3476-1978-8975B",
"A7227-9709-7279-3559-7129-6867-1224-4800B",
"A1309-7392-8711-9477-2360-3402-4854-4924B",
"A3869-3664-9914-4403-8749-7523-1863-1535B",
"A3210-4832-9200-8373-5738-5697-5744-2937B",
"A1792-4519-3726-8126-6308-5191-9102-9735B",
"A8527-2305-6733-2458-8552-5895-4610-6039B",
"A8935-8426-4468-9041-1659-3498-4614-5218B",
"A5650-7498-3472-3428-4085-1401-1922-8629B",
"A6805-8151-6020-1006-5892-8135-1098-2982B",
"A3995-8335-4883-6210-3528-8198-3413-7465B",
"A9680-7180-2065-8226-5174-2321-5799-9051B",
"A5957-3071-3702-2846-1133-2011-4388-1754B",
"A3248-6597-6804-7591-7771-9872-7282-2858B",
"A3586-2855-3207-7473-4540-8654-9644-2322B",
"A1600-5375-5507-4133-8964-3630-6119-7726B",
"A1270-1945-2244-4730-3122-3020-6581-6318B",
"A2582-8640-6994-6769-9736-7334-1966-7978B",
"A6160-1494-6075-1879-9717-9784-6588-6351B",
"A7129-7602-8438-1472-5277-7773-4499-5837B",
"A7204-3953-4111-9486-9272-3687-7684-2741B",
"A1205-6532-1284-4621-4311-4901-4167-5740B",
"A8852-9759-8118-5143-7231-5195-6220-5659B",
"A3893-7949-1254-7040-1568-2024-5439-2879B",
"A1977-3323-7674-5398-2087-7264-6934-1137B",
"A5200-9192-5438-9680-6863-9550-8885-5807B",
"A2982-3618-2602-7290-5183-7205-9522-5637B",
"A4838-1945-2490-7720-6504-2631-1577-8940B",
"A8806-8115-2606-8065-3264-8209-6970-7868B",
"A1198-1358-5834-5472-1508-8738-8065-1521B",
"A7981-2182-4434-8649-7447-7860-2447-8868B",
"A4952-7751-7804-5152-1972-2623-1846-1723B",
"A4020-3749-9908-6000-8028-2436-1417-1243B",
"A4417-6969-9161-6025-5061-6190-9355-2680B",
"A7974-9166-8274-3370-6411-5402-6408-9722B",
"A2181-7913-7430-3127-2112-9649-5261-9283B",
"A5632-6506-8295-4100-7491-1082-2503-3453B",
"A4305-2026-6435-2602-1030-6588-7972-3494B",
"A8760-7337-6017-5986-7358-6695-5289-8905B",
"A4781-4792-2291-5095-3847-8116-5490-5854B",
"A5849-6246-1564-6336-3061-2606-6825-8103B",
"A9261-9781-8611-7809-7822-6931-7941-2119B",
"A4532-6902-6067-9168-4860-3695-4154-8234B",
"A5040-5427-6014-5737-8319-2442-4576-7186B",
"A4833-7605-1183-8550-4844-7318-4688-9441B",
"A3003-6983-9703-7824-6616-3931-7866-9632B",
"A3695-6347-7000-5772-8999-2332-7248-5897B",
"A6385-7509-7662-2502-8140-5274-6074-6477B",
"A6866-5156-6435-8947-8035-8457-9257-7669B",
"A3572-5615-1213-4832-6144-3458-2474-2729B",
"A8273-5847-6318-3339-1964-3528-3134-1734B",
"A8395-3086-6919-9796-2097-1706-2720-7006B",
"A9132-2384-7343-8176-4461-5939-8141-9267B",
"A7798-9249-5816-9457-5502-7716-1154-9087B",
"A6995-7822-3800-7141-7098-9640-4468-1910B",
"A3828-3175-6856-5352-1372-9469-4400-4503B",
"A9998-5355-7321-1942-2193-9098-6244-7105B",
"A1704-6742-3561-7195-5517-5642-7845-1880B",
"A5816-8206-7863-3097-4264-1770-1618-7230B",
"A1614-5018-2315-5112-9106-2207-1908-3112B",
"A1031-2157-8400-4303-1495-2481-7172-9787B",
"A3243-1172-9326-4808-4290-2766-1729-6187B",
"A4998-7892-9772-4518-3850-9012-9567-7881B",
"A1464-6531-2300-2891-2144-9124-4611-3196B",
"A8358-1433-5967-1734-5889-1363-9220-6624B",
"A9555-3729-4311-3761-1822-6367-6109-1836B",
"A3561-6280-3711-6958-9781-8665-2554-6677B",
"A2155-9437-9799-8397-5562-7263-8809-1001B",
"A9249-9375-4792-7337-9110-9808-9000-1645B",
"A9534-1720-9440-2021-2154-3917-1106-6596B",
"A4422-9096-8277-6395-6035-8669-7040-5596B",
"A3277-2800-1651-1608-9364-1012-4095-6730B",
"A3997-6004-6383-1610-9531-7584-5775-2968B",
"A6509-9137-7943-5594-4196-8760-7697-3096B",
"A7521-9744-8712-5794-6476-5703-6481-6749B",
"A7391-5612-1102-5963-7220-7377-2855-1986B",
"A2291-1393-1265-6155-1742-2035-8101-8992B",
"A7533-4429-9435-8484-6293-9916-9425-2071B",
"A5580-5364-1850-2311-1984-5954-1661-8447B",
"A3672-9486-5059-8908-4671-9705-1076-8022B",
"A7513-6824-1453-5012-5317-4765-8993-7999B",
"A8507-6449-8483-4955-3206-9851-8184-7985B",
"A3074-6187-4119-8639-6371-4578-8111-3105B",
"A3098-6778-2746-5446-1330-4349-2609-3036B",
"A8812-1548-7855-8543-6403-9823-6261-7207B",
"A7051-2107-4066-5676-1232-1024-7594-7628B",
"A7454-8089-2130-8652-4914-9546-4298-9379B",
"A4232-5436-2144-1581-3273-8547-1679-6370B",
"A1976-5055-2406-1940-7068-9610-1655-2093B",
"A5299-1683-7544-5851-5250-5597-5104-2866B",
"A7350-7131-8042-6693-5399-2293-9502-8954B",
"A8879-1436-2561-7817-8494-8881-9128-7715B",
"A1753-2854-4310-5676-5652-2500-4793-5186B",
"A8252-2121-7206-4937-1964-8344-8040-8383B",
"A5137-8562-3698-3746-7657-4882-8284-1437B",
"A9297-4215-2240-2598-9066-6111-6661-7874B",
"A2035-8931-7783-8511-3642-4701-8892-1911B",
"A7263-2658-3699-5288-1450-1833-8427-8989B",
"A3526-6156-1834-8129-5256-4091-2421-9690B",
"A6779-2415-2214-4833-3048-2162-8137-4185B",
"A2235-7253-2392-3769-7590-4486-9416-6034B",
"A7686-1591-7827-3686-3648-7770-8464-9526B",
"A8577-2049-1829-5679-7240-7740-1466-2503B",
"A7567-2716-9583-3760-9129-1706-7233-4963B",
"A9647-2700-3251-1221-1850-5258-7552-1049B",
"A8109-3939-8251-5996-2778-1183-1869-6570B",
"A4331-7371-7066-2000-9866-8931-1493-3972B",
"A7517-1454-2407-7116-3229-7928-8074-2832B",
"A4712-4825-3470-2167-5007-4574-3586-2069B",
"A9825-9668-4978-8621-9874-4758-7488-4701B",
"A2562-1316-1145-4460-7622-4716-5746-4548B",
"A5899-7154-8158-1278-5392-1632-9375-1351B",
"A3340-2255-3982-3692-6394-1329-5357-3066B",
"A6133-2699-6924-4370-6567-2130-2525-4599B",
"A1630-4145-4029-5199-6027-7787-6675-1779B",
"A7808-8345-9725-7399-2875-4055-7344-5028B",
"A2697-4945-8445-9901-9442-1984-1759-9434B",
"A5720-6694-3591-2726-8812-2593-3434-6431B",
"A3253-5648-1515-5298-8906-3019-4281-4678B",
"A1424-3219-2218-6319-5317-6584-5564-1742B",
"A5665-8970-2723-6789-5175-7888-1434-8733B",
"A5962-4219-9157-1406-3753-9844-7343-3698B",
"A1749-1347-4248-2761-9666-2147-1840-6649B",
"A3572-4044-8903-8907-8986-8207-9277-8275B",
"A2530-9742-7746-5786-6772-6499-9742-1235B",
"A3525-5042-8647-4275-6535-2394-5564-4705B",
"A8248-9766-7918-1575-4987-5200-3026-9246B",
"A2573-2834-4157-6474-6397-1407-6300-8216B",
"A1745-7780-8404-2825-6059-3483-6982-2571B",
"A3826-4303-5329-4432-6742-4376-5068-5107B",
"A8951-7663-7887-7353-1880-3641-3957-3966B",
"A1374-2835-7233-1755-9458-2737-2448-3062B",
"A6607-6011-6386-1380-8025-7756-8086-1869B",
"A8102-5039-9500-1094-9656-3002-8666-8407B",
"A1602-4689-9199-3574-7274-7150-1254-7942B",
"A4570-3269-8974-3132-9674-2996-6569-7175B",
"A8044-3005-4239-7292-7356-7789-7928-9279B",
"A7982-4089-2550-6863-3776-1351-7182-6035B",
"A2852-3721-1210-7495-9992-8642-3105-9832B",
"A5273-8237-7017-9810-8477-4572-1811-5852B",
"A8606-1459-3138-1024-5025-3780-7432-6728B",
"A7427-2512-7054-6038-5120-9205-6654-2231B",
"A1569-6998-5853-8623-9112-3602-2166-5799B",
"A6758-5875-6864-5063-6797-9350-1494-9285B",
"A8135-1340-6502-1819-6330-2276-3232-2182B",
"A4990-4678-6091-1204-1960-3584-2847-9510B",
"A7017-5838-8901-7793-1023-4542-8492-2283B",
"A8628-6760-9891-1564-2285-5505-8393-6109B",
"A7544-2007-5560-7656-2922-9954-2113-4045B",
"A5503-3152-3793-2060-1828-5358-8881-3532B",
"A4770-4014-5485-8610-3301-6912-4186-4582B",
"A5625-1923-5153-8086-5347-9142-1717-1147B",
"A9545-2903-6177-4300-3958-6917-4488-6455B",
"A5787-3688-5027-4603-1983-8796-6360-1513B",
"A1707-4595-3975-6456-1161-1142-7849-1449B",
"A7229-6736-9709-4225-9122-8959-4976-4734B",
"A9916-9923-8272-9443-5673-3924-7691-6718B",
"A3101-7639-9900-8564-7309-6852-2673-6272B",
"A6923-2653-3848-3992-3959-1977-4335-7082B",
"A1128-6292-2050-2935-6959-1611-1023-1302B",
"A3440-4637-1618-6760-2773-2696-9012-6438B",
"A6017-2052-8279-8986-9865-6205-5994-8547B",
"A5433-2612-4941-5394-1383-9487-2811-3525B",
"A4090-1403-6276-9639-1782-4257-2766-5199B",
"A7337-9241-6092-4961-8726-2566-7379-8530B",
"A6305-4034-6817-9130-6721-5578-1931-8625B",
"A5116-2334-9653-8211-1277-3843-6628-3468B",
"A5162-7967-1547-9588-2708-7182-8535-3502B",
"A4838-5420-7483-3040-2303-8785-5720-8435B",
"A6944-9167-5093-8104-4817-7872-7244-2459B",
"A7435-7874-3607-4089-5121-9748-2437-6209B",
"A4264-4857-1301-1966-2609-5153-1462-4131B",
"A8101-9399-2235-7512-2823-3985-2551-2930B",
"A3392-9741-5811-7107-3558-4685-6223-2239B",
"A3921-7450-6170-7963-4875-2381-8905-8698B",
"A5197-2157-8977-9282-7216-8494-9728-2654B",
"A9492-4316-3165-2304-9362-4753-3765-9915B",
"A5523-3242-1980-7478-5351-8085-6872-5159B",
"A1747-8158-8943-4401-2076-9836-6915-5260B",
"A9566-6552-1247-1263-3757-8274-6626-1337B",
"A8953-6018-7817-3915-7838-6543-2532-5379B",
"A7506-5354-7428-9512-9890-6716-4046-1298B",
"A6239-3931-4878-4385-3438-3921-8301-8835B",
"A4861-2742-3489-7111-1942-5097-7857-6341B",
"A3245-1557-6142-9994-2473-2997-8599-1822B",
"A5729-7773-3228-2492-9113-8023-1365-1204B",
"A3074-5745-9710-2249-5536-8967-7274-6067B",
"A3098-5172-5456-8573-8981-1136-1556-5803B",
"A1705-4188-9651-7949-9180-9802-3731-8908B",
"A9890-1916-6978-1027-8499-2215-9097-3893B",
"A3362-1949-2423-6946-8545-8778-1565-9184B",
"A9826-3305-7622-4722-5566-5677-9868-8340B",
"A3903-1366-6088-5917-2595-4976-7389-6849B",
"A5204-6259-9354-3234-1575-6676-6939-4077B",
"A5300-5574-7463-1136-5516-7008-4004-3498B",
"A6004-6023-7467-4461-5075-7272-8936-8486B",
"A6908-6925-2349-9842-7901-9621-4917-6004B",
"A3294-7417-3217-8570-4456-9773-1435-6765B",
"A2956-6214-3976-4834-5677-2981-8681-5269B",
"A5751-5560-8290-4501-7483-8489-3509-3002B",
"A9524-6173-8031-8672-3862-4741-3678-6921B",
"A8210-3961-6940-5168-1644-6021-6241-5799B",
"A6758-5581-9987-3460-8495-4080-5931-1919B",
"A1284-8436-2955-2679-2430-2255-7871-9129B",
"A8534-9029-4351-1870-2110-2991-9847-5842B",
"A2042-9260-7689-2700-7575-5613-3560-7387B",
"A4600-3784-6154-2621-5269-4833-4634-6427B",
"A8543-1520-8323-5741-5808-1225-5122-9346B",
"A1301-1507-7138-5078-1902-7697-4314-7709B",
"A4539-6646-3330-3248-2934-5388-1652-8186B",
"A2421-1955-2719-2297-1448-4474-6123-8625B",
"A2889-4965-3718-3728-9391-7519-3165-7943B",
"A2788-5933-1093-9663-1884-9874-5207-9142B",
"A1640-4945-8887-6693-1866-6984-9718-3393B",
"A2619-6084-3738-4308-4569-8702-8658-4655B",
"A3530-2799-2901-6041-4057-3396-3740-9234B",
"A9522-3766-4683-7886-9434-3136-6267-7786B",
"A6100-5039-9050-6016-1468-5942-4975-2624B",
"A8368-3077-7263-8850-1857-4340-1775-6353B",
"A5168-3602-2921-3175-1843-9432-9120-7104B",
"A6848-7660-4415-2826-4158-9553-6472-6438B",
"A5389-1405-6547-8327-6423-6005-9353-8865B",
"A8800-5377-4711-9256-3735-1065-8155-8513B",
"A5254-8719-7284-3832-4053-7353-7146-1312B",
"A7992-5945-3428-5673-4891-6684-5420-9207B",
"A8395-6842-8377-8602-3798-4001-3358-7684B",
"A7005-3637-5551-2162-7658-1417-8021-7187B",
"A1556-5139-6284-2078-1947-7275-5624-7318B",
"A7006-8882-5628-4928-1465-2788-9756-4340B",
"A3090-8834-7683-7818-2929-7918-7203-4043B",
"A8775-5044-1713-6313-7277-1369-1630-3078B",
"A4587-4372-5600-8942-5894-8549-6173-7892B",
"A3490-9198-3230-1870-8610-4926-2463-4567B",
"A6925-6669-3260-9978-2751-4492-4431-7570B",
"A9946-2740-4113-2873-5903-2499-9918-1369B",
"A5579-2209-6854-8478-9374-6046-8768-5447B",
"A5240-7886-4334-7790-1251-8321-9564-4988B",
"A9192-8998-8129-4041-8188-1884-2692-1708B",
"A1396-1321-8103-4778-3240-9037-5593-5392B",
"A1136-8284-7944-3892-2992-5687-2030-5120B",
"A5699-3754-5692-7227-9104-3569-8913-6524B",
"A2191-1481-7843-3442-2513-3659-3706-2684B",
"A2919-7239-9570-9437-3774-6319-8348-8494B",
"A6287-7408-1881-9423-6344-5068-8582-4564B",
"A1901-7577-2925-1636-7522-4527-4636-6633B",
"A9087-2325-2781-4343-1454-9678-6170-2388B",
"A9216-6035-1262-3067-3033-8312-6310-1475B",
"A6917-7621-7047-4232-2751-4089-7996-4162B",
"A8667-3628-7222-2285-1693-7562-9317-8305B",
"A1647-2328-1953-7058-5473-4140-7749-1936B",
"A3347-2555-4015-8147-1002-6025-5378-1815B",
"A8753-2846-5472-2165-1949-6797-2478-2823B",
"A7263-6411-1792-4478-4537-5930-3176-8266B",
"A3564-6279-1626-2761-7791-5748-4365-4237B",
"A9330-2751-7123-6668-2759-3598-9869-6956B",
"A8297-8728-5797-5632-3900-6558-2481-6411B",
"A2300-5126-3710-3069-7367-6057-5119-5277B",
"A3558-2916-2704-1268-8967-8543-7512-2442B",
"A8873-5107-8304-2815-3298-8985-7896-5828B",
"A1101-7736-3920-9646-1939-8220-7069-4764B",
"A1159-3687-6871-3031-1250-6077-1285-8904B",
"A9006-1877-2734-2840-7544-7702-3234-3104B",
"A1084-9839-4268-1493-9937-5379-6530-1725B",
"A9925-2467-4643-7763-1371-1997-5296-3701B",
"A3185-3556-3673-9099-7123-6276-4379-6950B",
"A3538-6402-5249-2331-6771-2481-6549-3002B",
"A7373-1394-7923-9592-5250-7370-8595-7449B",
"A1827-2112-7800-1312-3418-7522-6445-4915B",
"A6933-3735-1928-7373-8620-4877-5581-7730B",
"A3821-2757-2204-9619-7800-6228-1956-5266B",
"A8991-7496-8222-5360-2848-1599-2294-3900B",
"A4397-5519-1089-5460-4686-8221-7353-4465B",
"A1250-5408-6927-4576-6907-3492-4691-9026B",
"A9318-6125-2288-7135-4847-8413-4469-7719B",
"A1762-5685-9666-6978-4277-4130-9165-3949B",
"A6342-9376-9652-1620-6864-2376-9710-1269B",
"A3966-3926-6881-2916-5675-3988-1132-3809B",
"A5475-6769-2395-8194-5614-3502-4059-1515B",
"A4632-8407-9046-4866-8994-6217-4187-1968B",
"A2422-6003-1297-1555-3862-6640-5525-1806B",
"A6349-3336-1772-9845-1297-5269-4131-7310B",
"A8461-1561-8544-4897-3404-8471-5605-5895B",
"A2348-9278-4398-6176-7938-3021-5447-3045B",
"A2818-5363-6934-3896-4959-3945-1121-8862B",
"A4007-7947-1855-3426-8732-6847-1442-3547B",
"A6712-8249-7326-2930-3120-3376-4852-4969B",
"A8476-2869-3418-7600-1861-9361-8594-1635B",
"A1108-7930-6233-2691-7817-5414-2628-9544B",
"A1469-5206-4910-6832-5981-8896-8056-1069B",
"A9425-9975-5010-3606-6835-2846-1823-9891B",
"A5561-6724-2051-6429-9998-2650-8686-5527B",
"A6363-9668-1932-8027-9750-9372-9826-7382B",
"A2756-7415-2985-8114-1050-7904-9762-1648B",
"A1315-2774-5028-8515-5236-5664-5894-8850B",
"A4196-2484-5337-5559-7215-3643-5376-6680B",
"A6367-1543-9106-1302-3718-9958-2282-7070B",
"A6656-8612-3707-4317-7795-3237-6649-2796B",
"A5458-6117-8859-7636-6936-1146-8191-9325B",
"A9070-3256-4031-4783-4300-6297-7558-8571B",
"A8485-4736-6236-4088-3275-2988-6692-5169B",
"A9126-7886-5606-9254-8206-6608-4210-7064B",
"A6430-5454-9350-8019-7664-7492-4065-5373B",
"A3198-1896-9327-4070-8062-3637-4237-4579B",
"A5824-4215-1396-7405-1407-8813-7359-6004B",
"A3055-1673-3093-9429-4266-6825-2721-1311B",
"A1630-6652-4642-6922-3510-8025-2076-7126B",
"A2703-1254-8127-6338-3262-7689-5894-7058B",
"A1375-5048-2868-3235-4054-1918-9986-6082B",
"A6692-6043-4922-3360-6031-5432-4314-4020B",
"A3004-1142-5492-3327-9581-9675-8037-6076B",
"A9607-3845-6639-6160-7066-9513-7115-5206B",
"A4267-7065-1881-4491-5533-5475-1420-4401B",
"A1632-1509-1656-6484-6754-5950-4886-5405B",
"A4191-7213-7255-1758-8469-7673-7919-9418B",
"A4500-1353-8613-3271-6923-4661-2840-8784B",
"A2161-1454-4996-2451-4983-3901-6464-1036B",
"A4529-4018-8316-6833-8350-5675-2775-4467B",
"A2784-1842-4872-9858-5315-8825-8473-4654B",
"A7126-1541-4303-9806-1060-6356-4964-3789B",
"A2430-4501-6157-7290-9683-5438-7719-9001B",
"A4062-6217-5852-7874-4780-8713-8855-1066B",
"A8106-6824-9222-9291-4151-3748-5393-7449B",
"A2306-4915-8236-8361-8228-8895-4545-5335B",
"A3456-6796-1836-5686-9671-8535-1655-3928B",
"A8663-8364-8324-9799-8580-8598-9235-2670B",
"A8911-1494-1906-5724-9543-1406-2221-5582B",
"A8672-5258-7554-6706-3083-7069-7922-4352B",
"A4173-3927-7179-6967-1847-8131-2814-9247B",
"A5160-1753-7685-4209-9257-8131-1877-4115B",
"A8048-8142-1035-4917-7250-5891-4976-9305B",
"A4317-3700-8814-7142-2875-6075-7689-8135B",
"A5009-3531-1478-1692-3750-8877-6930-3363B",
"A6405-2206-9585-4662-9539-4025-1468-6441B",
"A2397-8028-3363-8479-3775-7288-9526-5068B",
"A8905-3227-8192-8786-8716-9407-6848-4920B",
"A8561-9837-2141-1855-3555-7893-9700-4501B",
"A5800-5855-9382-8634-6884-9152-5453-4017B",
"A3399-1084-9795-8507-6525-5001-9365-6323B",
"A3376-8945-2096-8026-9384-4250-3782-9970B",
"A8400-2759-2767-7570-1044-4334-7276-3112B",
"A9847-6712-5932-9769-5562-1142-3970-4110B",
"A2280-2894-9980-4191-6065-4001-7701-8779B",
"A3481-8600-2554-4974-4370-4858-5600-7794B",
"A2589-6435-7446-9989-9718-4434-1357-1784B",
"A8797-6915-8902-5315-5699-6720-4042-6445B",
"A9217-7692-6027-6856-3426-1387-2262-9375B",
"A7761-3025-5529-2362-3091-8685-1790-1387B",
"A8311-2198-2923-4806-7196-1472-7770-9819B",
"A5353-1118-2128-9104-1234-1059-6621-6906B",
"A1725-1083-2097-6131-9084-2712-4939-4680B",
"A9561-6058-8124-3926-5088-8935-7222-9601B",
"A7636-5547-5061-5604-8545-5964-5474-1978B",
"A6569-3839-7117-9715-2523-2308-7604-2473B",
"A3764-6605-8436-5555-7471-8210-4383-3826B",
"A3718-9435-2918-8037-1762-3845-3896-6710B",
"A4855-3857-2499-3357-9794-9365-8065-7404B",
"A6543-7037-3007-8807-6295-8014-5591-2457B",
"A3062-9751-1618-8182-3529-2935-2069-8822B",
"A3726-6967-9495-8212-1380-2548-4567-3028B",
"A9313-3190-1964-4248-1937-2755-7138-9975B",
"A6965-9694-1139-9182-4774-9140-1203-9909B",
"A5079-5843-3788-8896-2857-9077-7667-1549B",
"A6962-9336-5436-7910-8682-7419-3465-5730B",
"A1731-9289-5921-5963-1148-1805-3363-3416B",
"A7063-8056-2333-7140-7534-9721-6330-4527B",
"A7787-3257-4795-7481-1330-8031-7773-9110B",
"A9114-3862-9191-2070-3001-1451-7326-4577B",
"A6838-9742-2914-9121-2037-7620-6552-8068B",
"A2079-8583-8200-8815-6490-8161-6067-2218B",
"A2886-7455-5627-5431-5902-8804-6484-4996B",
"A6542-9233-4196-7504-4612-7174-2263-6026B",
"A6308-4112-6763-8966-1388-1241-7809-9975B",
"A4133-2119-7393-8886-5850-3514-8888-4617B",
"A5884-5503-1215-9363-1356-1907-9452-3322B",
"A2695-9182-9114-9791-7403-3321-2723-9253B",
"A1901-8689-6246-3663-8364-9148-6607-8471B",
"A8772-9227-5121-3318-4106-8239-7851-8409B",
"A1622-2472-4195-9480-4648-7613-7928-6200B",
"A4560-2623-9984-5801-5864-6929-9292-1996B",
"A8485-8044-1599-2372-8385-4896-8976-8653B",
"A1230-9212-8263-1743-4628-9753-3363-7165B",
"A6337-6454-7888-1467-7319-7551-9314-2790B",
"A7707-8917-8657-2163-1698-1850-3001-3745B",
"A5230-2384-7048-9652-7487-7035-7929-4296B",
"A4383-4956-6022-8288-4856-7550-8431-1202B",
"A1875-4383-6253-5791-8204-9128-6367-2023B",
"A1503-5338-9591-1870-9294-9104-6213-8014B",
"A3572-6902-7198-6745-3281-3009-1504-6331B",
"A8059-6752-9721-5383-7241-5425-1670-9535B",
"A6892-5585-2545-4812-3378-4964-9624-9068B",
"A1751-8903-8461-8474-2576-2364-3506-6443B",
"A9293-6217-6828-6124-3334-6454-6881-9137B",
"A7038-2755-2890-9626-5048-7223-3038-5543B",
"A1822-9503-4486-7065-2382-6031-9978-3996B",
"A9679-6889-5948-5622-7534-5409-7026-8377B",
"A7353-8203-4029-3988-5842-6980-6014-8723B",
"A4548-8989-2566-3908-9127-8088-9125-4527B",
"A1045-5652-4197-8606-4782-3702-7022-6976B",
"A2031-5383-2921-3839-5657-4577-5357-2207B",
"A7215-4782-8944-2574-3366-8830-9721-7577B",
"A9429-5171-7288-6642-1369-5355-2709-6872B",
"A4610-5501-2913-8028-1369-5802-2619-4899B",
"A1876-8696-8774-8609-4050-4566-3275-7803B",
"A7761-6935-4812-6235-4011-6845-7538-4106B",
"A1698-9788-1175-1486-9781-4587-3048-9426B",
"A9469-6759-7180-8905-5425-8801-9153-3690B",
"A7675-5323-8454-9780-2049-1900-8192-6946B",
"A6518-1424-7293-2569-5475-6206-6653-3372B",
"A3902-8951-2038-3099-9209-3969-3467-9068B",
"A5536-7341-5443-1425-9251-1475-4452-2815B",
"A3400-2379-2709-7200-7399-8291-3569-2983B",
"A1821-9775-5539-1244-9161-8347-2294-1805B",
"A1926-4957-7477-3551-6023-5993-9784-5239B",
"A5362-4680-9161-4847-2601-7036-1925-2319B",
"A7714-8737-5306-5745-4149-8663-7015-9999B",
"A2558-8942-6186-9293-6055-6952-3272-4731B",
"A8157-3342-4998-8925-8622-5454-6124-4921B",
"A1735-1151-9664-2168-4371-8589-6666-1959B",
"A3906-4548-3763-8148-9674-7899-9040-3776B",
"A4112-4734-7231-8102-7071-6551-5024-8827B",
"A7579-9329-5279-2138-7080-1073-7011-3742B",
"A4669-4365-4828-7030-2999-4187-4561-1336B",
"A3446-4148-8277-1528-3477-4978-2858-7949B",
"A1759-6492-9775-5066-9318-9116-5662-3054B",
"A7351-5765-8313-1909-1972-1847-8504-5728B",
"A9983-2805-6389-4294-7343-3761-2920-2251B",
"A7686-2181-4747-1719-8041-5254-5457-6726B",
"A1168-3943-1165-1876-4957-9586-7832-6808B",
"A6643-2521-5514-8615-8203-3147-7630-5199B",
"A2258-1314-3185-3241-5256-7728-7920-6002B",
"A2860-9228-9130-1009-5981-5334-5683-9819B",
"A5528-9413-8919-8273-5055-1745-8906-5116B",
"A2781-5080-5176-8034-3496-1590-3612-7704B",
"A5698-4319-7966-7946-8694-5063-3220-4135B",
"A7245-4378-9964-7153-8730-3054-9948-3265B",
"A5016-7764-1440-7455-1921-8424-3003-7086B",
"A6408-5242-6689-8295-8532-5394-4309-8739B",
"A2347-5760-1347-8519-3879-6355-3406-9487B",
"A1790-3672-3542-5810-4235-8457-4457-7131B",
"A5188-1324-7176-8399-1226-3322-3033-6891B",
"A4866-9110-7916-3693-3615-2091-2916-4927B",
"A5676-8435-6708-9970-7088-2532-6698-1659B",
"A2906-7382-2592-4352-2786-9420-5380-6891B",
"A6572-7997-9314-3603-2633-6732-3517-2565B",
"A9352-2857-7149-5384-8220-4918-7464-4735B",
"A1495-9343-1215-8832-5492-8507-9510-2238B",
"A1663-5425-3428-5180-4453-3482-2852-6697B",
"A7288-7246-3130-8941-1508-7120-8616-2458B",
"A8829-2336-7602-1953-4697-3709-4542-8815B",
"A5831-6712-4281-3910-6118-8507-2764-9200B",
"A9443-2894-6584-7347-2181-1654-7723-1155B",
"A1605-9934-1936-3794-8593-3693-6558-5595B",
"A7277-7395-4939-8850-6690-9572-8193-7253B",
"A7065-7552-9350-5078-4852-8544-3832-6206B",
"A8520-6175-2097-5871-4317-1253-7829-7166B",
"A5814-4214-9053-5399-3198-3441-4455-8237B",
"A9359-6519-2018-6639-8249-5969-4692-4147B",
"A8934-2328-8201-8505-9440-1380-2301-8506B",
"A6760-4170-8925-6186-5199-3605-1199-8855B",
"A6455-1683-4842-3522-1166-3766-6152-9437B",
"A5799-4088-9693-9090-7660-5286-9407-7973B",
"A3753-2910-3311-5351-1649-3024-6126-6273B",
"A9848-7532-9150-6731-9935-4307-2061-1632B",
"A1385-8767-2573-1224-6317-7408-5383-1012B",
"A2723-7828-9865-8534-3745-9825-4580-3643B",
"A3683-9457-9182-7442-1790-2634-8852-9992B",
"A6106-3935-9007-2948-7276-8386-4015-6732B",
"A8379-2439-3551-6410-5092-9854-5918-1744B",
"A8319-3076-7825-5327-3853-2490-1005-7651B",
"A7415-4024-6860-9835-8849-6098-8633-8258B",
"A9160-5150-8785-1764-8404-3869-7986-1750B",
"A1870-4430-6409-6815-3230-5699-1334-9937B",
"A5291-5087-1732-9948-4197-8636-5741-9954B",
"A4213-9956-6129-9206-8982-8073-8535-5937B",
"A8898-4003-8120-4764-2234-2809-8297-1439B",
"A1012-1351-8341-3459-7240-3148-5168-7456B",
"A7971-1939-5300-1973-2058-3521-1741-7517B",
"A7503-9262-6109-2398-8579-5689-9185-7292B",
"A5377-5421-9313-5560-2589-6751-4415-8111B",
"A3655-7893-2115-8658-9794-2362-9274-2948B",
"A8173-3434-2969-5912-7856-7406-7583-3489B",
"A6850-5209-3551-6440-3918-7935-2474-1154B",
"A5845-3448-9626-6612-2734-8785-9578-8142B",
"A3747-8852-5725-1179-3200-6661-7712-3174B",
"A9839-6445-2743-1331-8382-5502-1349-5165B",
"A8011-4508-3557-4867-5317-7098-7508-9961B",
"A9749-9420-3356-4177-9909-2826-9187-9018B",
"A6083-6853-3052-4853-9007-6698-7145-2517B",
"A7689-5458-6911-2699-6152-2068-6124-4623B",
"A9103-3207-8230-4368-7139-6367-9296-2243B",
"A4282-5184-6335-1862-9752-3724-5575-9429B",
"A8990-2795-3643-8017-5888-7428-3517-9039B",
"A1767-2909-2732-8868-2731-3706-6789-5664B",
"A2500-4710-3556-3307-6138-4410-7376-6281B",
"A3084-4720-9680-2205-3712-8050-5670-2448B",
"A4202-1609-9673-5077-1061-6308-4853-5534B",
"A9887-9659-7912-2461-4270-4461-7394-1232B",
"A3028-8214-1241-4275-9197-6448-6942-6998B",
"A1745-7162-2535-4297-9218-6745-4603-6309B",
"A4763-3249-2305-8046-7768-5078-8351-2142B",
"A8154-4778-9194-6666-7368-7213-8739-8685B",
"A8726-8636-6782-1949-7613-7900-4976-2834B",
"A2084-5275-7118-9708-9550-4989-9312-9612B",
"A3637-8301-6740-8450-9006-5891-3028-3969B",
"A6562-3701-9817-6412-2410-6186-6238-4164B",
"A1354-6888-3532-1011-6761-4885-2151-3649B",
"A8267-4576-1111-7842-2398-3574-8161-3603B",
"A6001-7336-6581-9917-7659-7721-6081-5680B",
"A6825-7148-2668-9992-3417-2572-2080-7159B",
"A5743-9960-2540-1816-8251-8086-1592-7867B",
"A3882-7089-9868-2470-7203-9598-5683-4855B",
"A2178-1178-6115-3401-8437-1068-5511-2412B",
"A2366-6229-6528-6859-1399-1342-7009-8922B",
"A5422-7713-7481-6683-7318-2818-9758-5976B",
"A1505-4491-1384-2966-8729-8190-5882-4175B",
"A2118-5808-9179-9120-7212-2261-3840-9611B",
"A9389-3433-5741-7889-8086-9937-4560-8359B",
"A8111-5685-8276-1001-3020-5765-7577-4693B",
"A3316-8072-6690-8969-2518-1695-2461-3910B",
"A4305-8034-6560-2172-8002-2589-9221-7425B",
"A4903-8019-1726-8261-4101-6535-4926-7829B",
"A7384-7480-4969-1728-9723-9962-7614-1377B",
"A5583-1575-7981-7397-9290-3093-2564-2181B",
"A8138-4159-2964-5222-4342-9230-1140-3096B",
"A5606-8455-3653-6201-7282-6186-2777-8988B",
    "CODEFREEREDEEMNOWITSGONESOONREDEEM?CodeRedeemTHISCODE",
    ]

    if code not in local_codes and code not in currency_data:
        await ctx.send(embed=discord.Embed(title="Invalid Code", 
                                             description=f"The code {code} is invalid.", 
                                             color=discord.Color.red()))
        return

    if code in data[str(user_id)].get("redeemed_codes", []):
        await ctx.send(embed=discord.Embed(title="Already Redeemed", 
                                             description=f"You have already redeemed the code {code}.", 
                                             color=discord.Color.red()))
        return

    if code in local_codes:
        data[str(user_id)]["currency"] += 10
        if "redeemed_codes" not in data[str(user_id)]:
            data[str(user_id)]["redeemed_codes"] = []
        data[str(user_id)]["redeemed_codes"].append(code)
        save_user_data(user_id, data[str(user_id)])
        await ctx.send(embed=discord.Embed(title="Code Redeemed", 
                                             description=f"You have redeemed the code {code} and earned 10 currency!", 
                                             color=discord.Color.green()))
    else:
        generated_code_info = currency_data[code]
        if generated_code_info:
            data[str(user_id)]["currency"] += generated_code_info["amount"]
            currency_data.pop(code)
            if "redeemed_codes" not in data[str(user_id)]:
                data[str(user_id)]["redeemed_codes"] = []
            data[str(user_id)]["redeemed_codes"].append(code)
            save_user_data(user_id, data[str(user_id)])
            await ctx.send(embed=discord.Embed(title="Code Redeemed", 
                                                 description=f"You have redeemed the code {code} and received {generated_code_info['amount']} currency!", 
                                                 color=discord.Color.green()))

@bot.command()
async def Msg(ctx, user_identifier: str, *, message: str):
    if ctx.author.id != ADMIN_ID:
        embed = discord.Embed(title="Permission Denied", 
                              description="You do not have permission to use this command.", 
                              color=discord.Color.red())
        await ctx.send(embed=embed)
        return
    
    target_user = await resolve_user(ctx, user_identifier)
    if not target_user:
        await ctx.send(embed=discord.Embed(title="User Not Found", 
                                             description="Could not find the user specified.", 
                                             color=discord.Color.red()))
        return

    await target_user.send(message)
    await ctx.send(embed=discord.Embed(title="Message Sent", 
                                        description=f"Message sent to {target_user.mention} (User ID: {target_user.id}).", 
                                        color=discord.Color.green()))

@bot.command()
async def MsgAll(ctx, *, message: str):
    if ctx.author.id != ADMIN_ID:
        embed = discord.Embed(title="Permission Denied", 
                              description="You do not have permission to use this command.", 
                              color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    data = load_data()
    users = list(data.keys())

    for user_id in users:
        user = await bot.fetch_user(int(user_id))
        try:
            await user.send(f"{user.mention}, {message}")
        except discord.Forbidden:
            print(f"Could not send message to user ID {user_id}. They may have DMs disabled.")

    await ctx.send(embed=discord.Embed(title="Message Sent", 
                                        description="Your message has been sent to all users.", 
                                        color=discord.Color.green()))

@bot.command()
async def BankView(ctx, user_identifier: str):
    if ctx.author.id != ADMIN_ID:
        embed = discord.Embed(title="Permission Denied", 
                              description="You do not have permission to use this command.", 
                              color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    target_user = await resolve_user(ctx, user_identifier)
    if not target_user:
        await ctx.send(embed=discord.Embed(title="User Not Found", 
                                             description="Could not find the user specified.", 
                                             color=discord.Color.red()))
        return

    target_data = get_user_data(target_user.id)

    embed = discord.Embed(title=f"Bank - User: {target_user.mention} (User ID: {target_user.id})", 
                          color=discord.Color.gold())
    embed.add_field(name="Current Currency", value=f"{target_data[str(target_user.id)]['currency']}", inline=False)
    embed.add_field(name="Redeemed Robux", value=f"{target_data[str(target_user.id)]['redeemed_robux']}", inline=False)
    embed.add_field(name="Redeemed Codes", 
                    value=f"{', '.join(target_data[str(target_user.id)]['redeemed_codes']) if target_data[str(target_user.id)]['redeemed_codes'] else 'None'}", 
                    inline=False)
    if target_data[str(target_user.id)]['backup_key']:
        embed.add_field(name="Backup Key", value=f"||{target_data[str(target_user.id)]['backup_key']}||", inline=False)

    await ctx.send(embed=embed)

@bot.command()
async def BankAll(ctx):
    if ctx.author.id != ADMIN_ID:
        embed = discord.Embed(title="Permission Denied", 
                              description="You do not have permission to use this command.", 
                              color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    data = load_data()
    embed = discord.Embed(title="All User Banks", color=discord.Color.gold())
    for user_id, user_data in data.items():
        user = await bot.fetch_user(int(user_id))
        bank_info = (
            f"Username: {user.name}\n"
            f"Current Currency: {user_data['currency']}\n"
            f"Redeemed Robux: {user_data['redeemed_robux']}\n"
            f"Redeemed Codes: {', '.join(user_data['redeemed_codes']) if user_data['redeemed_codes'] else 'None'}\n"
            f"Backup Key: ||{user_data['backup_key']}||\n\n"
        )
        embed.add_field(name=f"User ID: {user_id}", value=bank_info, inline=False)

    await ctx.send(embed=embed)

@bot.command()
async def Leaderboard(ctx):
    data = load_data()
    sorted_users = sorted(data.items(), key=lambda x: x[1]['currency'], reverse=True)

    leaderboard = ""
    for idx, (user_id, user_data) in enumerate(sorted_users[:20], start=1):
        user = await bot.fetch_user(int(user_id))
        
        if idx == 1:
            medal = "🥇"
        elif idx == 2:
            medal = "🥈"
        elif idx == 3:
            medal = "🥉"
        else:
            medal = "🏅"

        leaderboard += f"{idx}. {user.name} {medal}\n"

    if not leaderboard:
        leaderboard = "No users available."

    embed = discord.Embed(title="Currency Leaderboard", description=leaderboard, color=discord.Color.blue())
    await ctx.send(embed=embed)

async def send_dm(user, message):
    if user:
        try:
            await user.send(message)
        except discord.Forbidden:
            print(f"Could not DM {user.name}. They may have DMs disabled.")

async def resolve_user(ctx, user_identifier):
    if ctx.message.mentions:
        return ctx.message.mentions[0]

    try:
        user_id = int(user_identifier)
        return await bot.fetch_user(user_id)
    except ValueError:
        pass
    
    for member in ctx.guild.members:
        if member.name == user_identifier or member.display_name == user_identifier:
            return member
    
    return None

def convert_duration_to_seconds(duration):
    multiplier = {"H": 3600, "M": 60, "S": 1}
    if duration[-1].upper() in multiplier:
        time_value = int(duration[:-1])
        return time_value * multiplier[duration[-1].upper()]
    return None

def is_allowed_user():
    async def predicate(ctx):
        return ctx.author.id == ALLOWED_USER_ID
    return commands.check(predicate)

@bot.command()
@is_allowed_user()
async def Ban(ctx, user_identifier: str, *, reason="No reason provided."):
    user = await resolve_user(ctx, user_identifier)
    if not user:
        await ctx.send("User not found.")
        return
    
    await send_dm(user, f"You have been banned from {ctx.guild.name} for: {reason}")
    await ctx.guild.ban(user, reason=reason)
    await ctx.send(f"{user.name} has been banned for: {reason}")

@bot.command()
@is_allowed_user()
async def Unban(ctx, user_id: int):
    try:
        user = await bot.fetch_user(user_id)
        await ctx.guild.unban(user)
        await ctx.send(f"{user.name} has been unbanned successfully.")
    except discord.NotFound:
        await ctx.send("User not found or already unbanned.")
    except discord.Forbidden:
        await ctx.send("I do not have permission to unban this user.")
    except discord.HTTPException:
        await ctx.send("An error occurred when trying to unban the user.")

@bot.command()
@is_allowed_user()
async def Kick(ctx, user_identifier: str, *, reason="No reason provided."):
    user = await resolve_user(ctx, user_identifier)
    if not user:
        await ctx.send("User not found.")
        return
    
    await send_dm(user, f"You have been kicked from {ctx.guild.name} for: {reason}")
    await ctx.guild.kick(user, reason=reason)
    await ctx.send(f"{user.name} has been kicked for: {reason}")

@bot.command()
@is_allowed_user()
async def Timeout(ctx, user_identifier: str, duration: str, *, reason="No reason provided."):
    user = await resolve_user(ctx, user_identifier)
    if not user:
        await ctx.send("User not found.")
        return

    await send_dm(user, f"You have been timed out from {ctx.guild.name} for {duration} for: {reason}")

    duration_in_seconds = convert_duration_to_seconds(duration)
    if duration_in_seconds is None:
        await ctx.send("Invalid duration format. Please use a format like 1H, 15M, or 30S.")
        return

    timeout_role = discord.utils.get(ctx.guild.roles, name="Timeout")
    if timeout_role is None:
        await ctx.send("Timeout role not found. Please ensure it exists.")
        return

    await user.add_roles(timeout_role)
    await asyncio.sleep(duration_in_seconds)
    await user.remove_roles(timeout_role)
    await ctx.send(f"{user.name} has been timed out for {duration}.")

@bot.command()
@is_allowed_user()
async def Warn(ctx, user_identifier: str, *, reason="No reason provided."):
    user = await resolve_user(ctx, user_identifier)
    if not user:
        await ctx.send("User not found.")
        return

    await send_dm(user, f"You have been warned in {ctx.guild.name} for: {reason}")
    await ctx.send(f"{user.name} has been warned for: {reason}")

currency_data = {}

@bot.command()
@commands.has_permissions(administrator=True)
async def GenerateCode(ctx, amount: int, worth: int = None):
    if amount < 1:
        await ctx.send(embed=discord.Embed(
            title="Invalid Amount", 
            description="Please specify a valid positive amount for the quantity.", 
            color=discord.Color.red()
        ))
        return
    
    if worth is None or worth < 1:
        await ctx.send(embed=discord.Embed(
            title="Invalid Worth", 
            description="Please specify a valid positive worth for the code(s).", 
            color=discord.Color.red()
        ))
        return

    codes = []
    
    for _ in range(amount):
        code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=12))
        codes.append((code, worth))

    embed = discord.Embed(title=f"Generated {'Code' if amount == 1 else 'Codes'}", description="Here are the codes you've generated:", color=discord.Color.blue())
    for code, value in codes:
        embed.add_field(name="Code", value=code, inline=False)
        embed.add_field(name="Value", value=f"{value} Currency", inline=False)
    
    embed.set_footer(text=f"Generated by: {ctx.author.mention}")
    await ctx.send(embed=embed)

    for code, value in codes:
        currency_data[code] = {"amount": value, "generated_by": ctx.author.id}



bot.run(TOKEN)